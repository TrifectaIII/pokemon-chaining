import {
    createAsyncThunk,
    createSlice,
    PayloadAction,
} from '@reduxjs/toolkit';

import {
    RootState,
} from './store';
import {
    fetchEggGroupInfo,
} from '../api/pokeAPI';

type Load = 'loading' | 'loaded' | 'failed' | 'unloaded';

// Slice of state for counter page
export interface PokemonState {
    load: Load;
    startingPokemon: string;
    endingPokemon: string;
}

const initialState: PokemonState = {
    load: 'unloaded',
    startingPokemon: '',
    endingPokemon: '',
};

export const fetchEggGroupInfoAsync = createAsyncThunk(
    'pokemon/fetchEggGroupInfo',
    async () => {

        const response = await fetchEggGroupInfo();
        // The value we return becomes the `fulfilled` action payload
        return response.data;

    },
);

export const pokemonSlice = createSlice({
    name: 'pokemon',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setStarting: (state, action: PayloadAction<string>) => {

            state.startingPokemon = action.payload;

        },
        setEnding: (state, action: PayloadAction<string>) => {

            state.endingPokemon = action.payload;

        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {

        builder.
            addCase(fetchEggGroupInfoAsync.pending, (state) => {

                state.load = 'loading';

            }).
            addCase(fetchEggGroupInfoAsync.fulfilled, (state, action) => {

                state.load = 'loaded';

            }).
            addCase(fetchEggGroupInfoAsync.rejected, (state) => {

                state.load = 'failed';

            });

    },
});

export const {setStarting, setEnding} = pokemonSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.template.value)`
export const selectLoad = (state: RootState): Load => state.pokemon.load;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//     dispatch,
//     getState
// ) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };

export default pokemonSlice.reducer;
